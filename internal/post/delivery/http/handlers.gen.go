// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/url"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gofiber/fiber/v2"
)

// Id defines model for Id.
type Id = float32

// Related defines model for Related.
type Related = []string

// PostGetOneParams defines parameters for PostGetOne.
type PostGetOneParams struct {
	// Related Включение полной информации о соответвующем объекте сообщения.
	//
	// Если тип объекта не указан, то полная информация об этих объектах не
	// передаётся.
	Related *Related `form:"related,omitempty" json:"related,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение информации о ветке обсуждения
	// (GET /post/{id}/details)
	PostGetOne(c *fiber.Ctx, id Id, params PostGetOneParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostGetOne operation middleware
func (siw *ServerInterfaceWrapper) PostGetOne(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", c.Params("id"), &id)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGetOneParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "related" -------------

	err = runtime.BindQueryParameter("form", true, false, "related", query, &params.Related)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter related: %w", err).Error())
	}

	return siw.Handler.PostGetOne(c, id, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/post/:id/details", wrapper.PostGetOne)

}
