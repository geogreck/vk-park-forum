// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/url"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gofiber/fiber/v2"
)

// Defines values for Sort.
const (
	Flat       Sort = "flat"
	ParentTree Sort = "parent_tree"
	Tree       Sort = "tree"
)

// Defines values for VoteVoice.
const (
	Minus1 VoteVoice = -1
	N1     VoteVoice = 1
)

// Desc defines model for Desc.
type Desc = bool

// Limit defines model for Limit.
type Limit = float32

// Post Сообщение внутри ветки обсуждения на форуме.
type Post struct {
	// Author Автор, написавший данное сообщение.
	Author string `json:"author"`

	// Created Дата создания сообщения на форуме.
	Created *time.Time `json:"created,omitempty"`

	// Forum Идентификатор форума (slug) данного сообещния.
	Forum *string `json:"forum,omitempty"`

	// Id Идентификатор данного сообщения.
	Id *float32 `json:"id,omitempty"`

	// IsEdited Истина, если данное сообщение было изменено.
	IsEdited *bool `json:"isEdited,omitempty"`

	// Message Собственно сообщение форума.
	Message string `json:"message"`

	// Parent Идентификатор родительского сообщения (0 - корневое сообщение обсуждения).
	Parent *float32 `json:"parent,omitempty"`

	// Thread Идентификатор ветви (id) обсуждения данного сообещния.
	Thread *float32 `json:"thread,omitempty"`
}

// Posts defines model for Posts.
type Posts = []Post

// Since defines model for Since.
type Since = time.Time

// Slug defines model for Slug.
type Slug = string

// Sort Вид сортировки:
//
//   - flat - по дате, комментарии выводятся простым списком в порядке создания;
//   - tree - древовидный, комментарии выводятся отсортированные в дереве
//     по N штук;
//   - parent_tree - древовидные с пагинацией по родительским (parent_tree),
//     на странице N родительских комментов и все комментарии прикрепленные
//     к ним, в древвидном отображение.
//
// Подробности: https://park.mail.ru/blog/topic/view/1191/
type Sort string

// ThreadUpdate Сообщение для обновления ветки обсуждения на форуме.
// Пустые параметры остаются без изменений.
type ThreadUpdate struct {
	// Message Описание ветки обсуждения.
	Message *string `json:"message,omitempty"`

	// Title Заголовок ветки обсуждения.
	Title *string `json:"title,omitempty"`
}

// Vote Информация о голосовании пользователя.
type Vote struct {
	// Nickname Идентификатор пользователя.
	Nickname string `json:"nickname"`

	// Voice Отданный голос.
	Voice VoteVoice `json:"voice"`
}

// VoteVoice Отданный голос.
type VoteVoice float32

// ThreadGetPostsParams defines parameters for ThreadGetPosts.
type ThreadGetPostsParams struct {
	// Limit Максимальное кол-во возвращаемых записей.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Since Идентификатор поста, после которого будут выводиться записи
	// (пост с данным идентификатором в результат не попадает).
	Since *Since `form:"since,omitempty" json:"since,omitempty"`

	// Sort Вид сортировки:
	//
	//  * flat - по дате, комментарии выводятся простым списком в порядке создания;
	//  * tree - древовидный, комментарии выводятся отсортированные в дереве
	//    по N штук;
	//  * parent_tree - древовидные с пагинацией по родительским (parent_tree),
	//    на странице N родительских комментов и все комментарии прикрепленные
	//    к ним, в древвидном отображение.
	//
	// Подробности: https://park.mail.ru/blog/topic/view/1191/
	Sort *Sort `form:"sort,omitempty" json:"sort,omitempty"`

	// Desc Флаг сортировки по убыванию.
	Desc *Desc `form:"desc,omitempty" json:"desc,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Создание новых постов
	// (POST /thread/{slug_or_id}/create)
	PostsCreate(c *fiber.Ctx, slugOrId Slug) error
	// Получение информации о ветке обсуждения
	// (GET /thread/{slug_or_id}/details)
	ThreadGetOne(c *fiber.Ctx, slugOrId Slug) error
	// Обновление ветки
	// (POST /thread/{slug_or_id}/details)
	ThreadUpdate(c *fiber.Ctx, slugOrId Slug) error
	// Сообщения данной ветви обсуждения
	// (GET /thread/{slug_or_id}/posts)
	ThreadGetPosts(c *fiber.Ctx, slugOrId Slug, params ThreadGetPostsParams) error
	// Проголосовать за ветвь обсуждения
	// (POST /thread/{slug_or_id}/vote)
	ThreadVote(c *fiber.Ctx, slugOrId Slug) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostsCreate operation middleware
func (siw *ServerInterfaceWrapper) PostsCreate(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "slug_or_id" -------------
	var slugOrId Slug

	err = runtime.BindStyledParameter("simple", false, "slug_or_id", c.Params("slug_or_id"), &slugOrId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter slug_or_id: %w", err).Error())
	}

	return siw.Handler.PostsCreate(c, slugOrId)
}

// ThreadGetOne operation middleware
func (siw *ServerInterfaceWrapper) ThreadGetOne(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "slug_or_id" -------------
	var slugOrId Slug

	err = runtime.BindStyledParameter("simple", false, "slug_or_id", c.Params("slug_or_id"), &slugOrId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter slug_or_id: %w", err).Error())
	}

	return siw.Handler.ThreadGetOne(c, slugOrId)
}

// ThreadUpdate operation middleware
func (siw *ServerInterfaceWrapper) ThreadUpdate(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "slug_or_id" -------------
	var slugOrId Slug

	err = runtime.BindStyledParameter("simple", false, "slug_or_id", c.Params("slug_or_id"), &slugOrId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter slug_or_id: %w", err).Error())
	}

	return siw.Handler.ThreadUpdate(c, slugOrId)
}

// ThreadGetPosts operation middleware
func (siw *ServerInterfaceWrapper) ThreadGetPosts(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "slug_or_id" -------------
	var slugOrId Slug

	err = runtime.BindStyledParameter("simple", false, "slug_or_id", c.Params("slug_or_id"), &slugOrId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter slug_or_id: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ThreadGetPostsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", query, &params.Since)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter since: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "desc" -------------

	err = runtime.BindQueryParameter("form", true, false, "desc", query, &params.Desc)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter desc: %w", err).Error())
	}

	return siw.Handler.ThreadGetPosts(c, slugOrId, params)
}

// ThreadVote operation middleware
func (siw *ServerInterfaceWrapper) ThreadVote(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "slug_or_id" -------------
	var slugOrId Slug

	err = runtime.BindStyledParameter("simple", false, "slug_or_id", c.Params("slug_or_id"), &slugOrId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter slug_or_id: %w", err).Error())
	}

	return siw.Handler.ThreadVote(c, slugOrId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/thread/:slug_or_id/create", wrapper.PostsCreate)

	router.Get(options.BaseURL+"/thread/:slug_or_id/details", wrapper.ThreadGetOne)

	router.Post(options.BaseURL+"/thread/:slug_or_id/details", wrapper.ThreadUpdate)

	router.Get(options.BaseURL+"/thread/:slug_or_id/posts", wrapper.ThreadGetPosts)

	router.Post(options.BaseURL+"/thread/:slug_or_id/vote", wrapper.ThreadVote)

}
