// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package models

import (
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for Sort.
const (
	Flat       Sort = "flat"
	ParentTree Sort = "parent_tree"
	Tree       Sort = "tree"
)

// Defines values for VoteVoice.
const (
	Minus1 VoteVoice = -1
	N1     VoteVoice = 1
)

// Desc defines model for Desc.
type Desc = bool

// Error defines model for Error.
type Error struct {
	// Message Текстовое описание ошибки.
	// В процессе проверки API никаких проверок на содерижимое данного описание не делается.
	Message *string `json:"message,omitempty"`
}

// Forum Информация о форуме.
type Forum struct {
	// Posts Общее кол-во сообщений в данном форуме.
	Posts *float32 `json:"posts,omitempty"`

	// Slug Человекопонятный URL (https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D0%BC%D0%B0%D0%BD%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_URL), уникальное поле.
	Slug string `json:"slug"`

	// Threads Общее кол-во ветвей обсуждения в данном форуме.
	Threads *float32 `json:"threads,omitempty"`

	// Title Название форума.
	Title string `json:"title"`

	// User Nickname пользователя, который отвечает за форум.
	User string `json:"user"`
}

// Id defines model for Id.
type Id = float32

// Limit defines model for Limit.
type Limit = float32

// Nickname defines model for Nickname.
type Nickname = string

// Post Сообщение внутри ветки обсуждения на форуме.
type Post struct {
	// Author Автор, написавший данное сообщение.
	Author string `json:"author"`

	// Created Дата создания сообщения на форуме.
	Created *time.Time `json:"created,omitempty"`

	// Forum Идентификатор форума (slug) данного сообещния.
	Forum *string `json:"forum,omitempty"`

	// Id Идентификатор данного сообщения.
	Id *float32 `json:"id,omitempty"`

	// IsEdited Истина, если данное сообщение было изменено.
	IsEdited *bool `json:"isEdited,omitempty"`

	// Message Собственно сообщение форума.
	Message string `json:"message"`

	// Parent Идентификатор родительского сообщения (0 - корневое сообщение обсуждения).
	Parent *float32 `json:"parent,omitempty"`

	// Thread Идентификатор ветви (id) обсуждения данного сообещния.
	Thread *float32 `json:"thread,omitempty"`
}

// PostFull Полная информация о сообщении, включая связанные объекты.
type PostFull struct {
	// Author Информация о пользователе.
	Author *User `json:"author,omitempty"`

	// Forum Информация о форуме.
	Forum *Forum `json:"forum,omitempty"`

	// Post Сообщение внутри ветки обсуждения на форуме.
	Post *Post `json:"post,omitempty"`

	// Thread Ветка обсуждения на форуме.
	Thread *Thread `json:"thread,omitempty"`
}

// PostUpdate Сообщение для обновления сообщения внутри ветки на форуме.
// Пустые параметры остаются без изменений.
type PostUpdate struct {
	// Message Собственно сообщение форума.
	Message *string `json:"message,omitempty"`
}

// Posts defines model for Posts.
type Posts = []Post

// Related defines model for Related.
type Related = []string

// Since defines model for Since.
type Since = time.Time

// Slug defines model for Slug.
type Slug = string

// Sort Вид сортировки:
//
//   - flat - по дате, комментарии выводятся простым списком в порядке создания;
//   - tree - древовидный, комментарии выводятся отсортированные в дереве
//     по N штук;
//   - parent_tree - древовидные с пагинацией по родительским (parent_tree),
//     на странице N родительских комментов и все комментарии прикрепленные
//     к ним, в древвидном отображение.
//
// Подробности: https://park.mail.ru/blog/topic/view/1191/
type Sort string

// Status defines model for Status.
type Status struct {
	// Forum Кол-во разделов в базе данных.
	Forum float32 `json:"forum"`

	// Post Кол-во сообщений в базе данных.
	Post float32 `json:"post"`

	// Thread Кол-во веток обсуждения в базе данных.
	Thread float32 `json:"thread"`

	// User Кол-во пользователей в базе данных.
	User float32 `json:"user"`
}

// Thread Ветка обсуждения на форуме.
type Thread struct {
	// Author Пользователь, создавший данную тему.
	Author string `json:"author"`

	// Created Дата создания ветки на форуме.
	Created *time.Time `json:"created,omitempty"`

	// Forum Форум, в котором расположена данная ветка обсуждения.
	Forum *string `json:"forum,omitempty"`

	// Id Идентификатор ветки обсуждения.
	Id *float32 `json:"id,omitempty"`

	// Message Описание ветки обсуждения.
	Message string `json:"message"`

	// Slug Человекопонятный URL (https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D0%BC%D0%B0%D0%BD%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_URL).
	// В данной структуре slug опционален и не может быть числом.
	Slug *string `json:"slug,omitempty"`

	// Title Заголовок ветки обсуждения.
	Title string `json:"title"`

	// Votes Кол-во голосов непосредственно за данное сообщение форума.
	Votes *float32 `json:"votes,omitempty"`
}

// ThreadUpdate Сообщение для обновления ветки обсуждения на форуме.
// Пустые параметры остаются без изменений.
type ThreadUpdate struct {
	// Message Описание ветки обсуждения.
	Message *string `json:"message,omitempty"`

	// Title Заголовок ветки обсуждения.
	Title *string `json:"title,omitempty"`
}

// Threads defines model for Threads.
type Threads = []Thread

// User Информация о пользователе.
type User struct {
	// About Описание пользователя.
	About *string `json:"about,omitempty"`

	// Email Почтовый адрес пользователя (уникальное поле).
	Email openapi_types.Email `json:"email"`

	// Fullname Полное имя пользователя.
	Fullname string `json:"fullname"`

	// Nickname Имя пользователя (уникальное поле).
	// Данное поле допускает только латиницу, цифры и знак подчеркивания.
	// Сравнение имени регистронезависимо.
	Nickname *string `json:"nickname,omitempty"`
}

// UserUpdate Информация о пользователе.
type UserUpdate struct {
	// About Описание пользователя.
	About *string `json:"about,omitempty"`

	// Email Почтовый адрес пользователя (уникальное поле).
	Email *openapi_types.Email `json:"email,omitempty"`

	// Fullname Полное имя пользователя.
	Fullname *string `json:"fullname,omitempty"`
}

// Users defines model for Users.
type Users = []User

// Vote Информация о голосовании пользователя.
type Vote struct {
	// Nickname Идентификатор пользователя.
	Nickname string `json:"nickname"`

	// Voice Отданный голос.
	Voice VoteVoice `json:"voice"`
}

// VoteVoice Отданный голос.
type VoteVoice float32
