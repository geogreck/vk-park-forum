// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/url"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gofiber/fiber/v2"
)

// Desc defines model for Desc.
type Desc = bool

// Forum Информация о форуме.
type Forum struct {
	// Posts Общее кол-во сообщений в данном форуме.
	Posts *float32 `json:"posts,omitempty"`

	// Slug Человекопонятный URL (https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D0%BC%D0%B0%D0%BD%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_URL), уникальное поле.
	Slug string `json:"slug"`

	// Threads Общее кол-во ветвей обсуждения в данном форуме.
	Threads *float32 `json:"threads,omitempty"`

	// Title Название форума.
	Title string `json:"title"`

	// User Nickname пользователя, который отвечает за форум.
	User string `json:"user"`
}

// Limit defines model for Limit.
type Limit = float32

// Since defines model for Since.
type Since = time.Time

// Slug defines model for Slug.
type Slug = string

// ForumGetThreadsParams defines parameters for ForumGetThreads.
type ForumGetThreadsParams struct {
	// Limit Максимальное кол-во возвращаемых записей.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Since Дата создания ветви обсуждения, с которой будут выводиться записи
	// (ветвь обсуждения с указанной датой попадает в результат выборки).
	Since *Since `form:"since,omitempty" json:"since,omitempty"`

	// Desc Флаг сортировки по убыванию.
	Desc *Desc `form:"desc,omitempty" json:"desc,omitempty"`
}

// ForumGetUsersParams defines parameters for ForumGetUsers.
type ForumGetUsersParams struct {
	// Limit Максимальное кол-во возвращаемых записей.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Since Идентификатор пользователя, с которого будут выводиться пользоватли
	// (пользователь с данным идентификатором в результат не попадает).
	Since *Since `form:"since,omitempty" json:"since,omitempty"`

	// Desc Флаг сортировки по убыванию.
	Desc *Desc `form:"desc,omitempty" json:"desc,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Создание форума
	// (POST /forum/create)
	ForumCreate(c *fiber.Ctx) error
	// Создание ветки
	// (POST /forum/{slug}/create)
	ThreadCreate(c *fiber.Ctx, slug Slug) error
	// Получение информации о форуме
	// (GET /forum/{slug}/details)
	ForumGetOne(c *fiber.Ctx, slug Slug) error
	// Список ветвей обсужления форума
	// (GET /forum/{slug}/threads)
	ForumGetThreads(c *fiber.Ctx, slug Slug, params ForumGetThreadsParams) error
	// Пользователи данного форума
	// (GET /forum/{slug}/users)
	ForumGetUsers(c *fiber.Ctx, slug Slug, params ForumGetUsersParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// ForumCreate operation middleware
func (siw *ServerInterfaceWrapper) ForumCreate(c *fiber.Ctx) error {

	return siw.Handler.ForumCreate(c)
}

// ThreadCreate operation middleware
func (siw *ServerInterfaceWrapper) ThreadCreate(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "slug" -------------
	var slug Slug

	err = runtime.BindStyledParameter("simple", false, "slug", c.Params("slug"), &slug)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter slug: %w", err).Error())
	}

	return siw.Handler.ThreadCreate(c, slug)
}

// ForumGetOne operation middleware
func (siw *ServerInterfaceWrapper) ForumGetOne(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "slug" -------------
	var slug Slug

	err = runtime.BindStyledParameter("simple", false, "slug", c.Params("slug"), &slug)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter slug: %w", err).Error())
	}

	return siw.Handler.ForumGetOne(c, slug)
}

// ForumGetThreads operation middleware
func (siw *ServerInterfaceWrapper) ForumGetThreads(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "slug" -------------
	var slug Slug

	err = runtime.BindStyledParameter("simple", false, "slug", c.Params("slug"), &slug)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter slug: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ForumGetThreadsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", query, &params.Since)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter since: %w", err).Error())
	}

	// ------------- Optional query parameter "desc" -------------

	err = runtime.BindQueryParameter("form", true, false, "desc", query, &params.Desc)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter desc: %w", err).Error())
	}

	return siw.Handler.ForumGetThreads(c, slug, params)
}

// ForumGetUsers operation middleware
func (siw *ServerInterfaceWrapper) ForumGetUsers(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "slug" -------------
	var slug Slug

	err = runtime.BindStyledParameter("simple", false, "slug", c.Params("slug"), &slug)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter slug: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ForumGetUsersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", query, &params.Since)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter since: %w", err).Error())
	}

	// ------------- Optional query parameter "desc" -------------

	err = runtime.BindQueryParameter("form", true, false, "desc", query, &params.Desc)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter desc: %w", err).Error())
	}

	return siw.Handler.ForumGetUsers(c, slug, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/forum/create", wrapper.ForumCreate)

	router.Post(options.BaseURL+"/forum/:slug/create", wrapper.ThreadCreate)

	router.Get(options.BaseURL+"/forum/:slug/details", wrapper.ForumGetOne)

	router.Get(options.BaseURL+"/forum/:slug/threads", wrapper.ForumGetThreads)

	router.Get(options.BaseURL+"/forum/:slug/users", wrapper.ForumGetUsers)

}
